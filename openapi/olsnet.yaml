# Test API for Connexion
swagger: '2.0'
#host: server:5000
basePath: /api/v1
schemes:
  - http

# Document metadata
info:
  version: "0.0.2"
  title: Test API Spec

# API Paths
paths:
  # This is a user creation endpoint.
  /users:
    post:
      summary: Create a user
      tags:
        - Users
      parameters:
        - name: user
          in: body
          schema:
            $ref: '#/definitions/createUser'
      responses:
        201:
          description: User successfully added
          schema:
            type: object
            title: UserID
            properties:
              user_id:
                type: string
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
        409:
          description: One or more user fields that should be unique are duplicated
    get:
      summary: Get a list of users
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/search_text'
      responses:
        200:
          description: List of users found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
      security:
        - main: []
  /users/{user_id}:
    parameters:
      - name: user_id
        description: Username for the user, 4 to 32 characters in length
        in: path
        type: string
        required: true
        minLength: 4
        maxLength: 400
    get:
      summary: Get information for a user by username
      tags:
        - Users
      responses:
        200:
          description: User updated successfully
          schema:
            $ref: '#/definitions/loginUser'
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
    put:
      summary: Update a user by username
      tags:
        - Users
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateUser'
      responses:
        200:
          description: User updated successfully
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
    delete:
      summary: Delete a user by username
      tags:
        - Users
      responses:
        204:
          description: User deleted successfully
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
      security:
        - main: []
  # This is a login endpoint.
  /login:
    post:
      summary:
        Authenticate via JWT or Facebook and hydrate the app
      tags:
        - Authentication
      description: |
        Authenticate users to the application with either username and password in POST data, or Facebook access_token in post data.
        Returns both an HTTP-only cookie and an authentication token
      parameters:
        - name: login_data
          in: body
          schema:
            $ref: '#/definitions/Login'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/loginUser'
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Invalid user or password
    get:
      summary:
        Hydrate the app for an already authenticated user
      tags:
        - Authentication
      description: |
        Requires the user to already be authenticated.
        Provides all of the user metadata that would be delivered for a new login
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/loginUser'
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
        401:
          description: User not authenticated
      security:
        - main: []
  /logout:
    post:
      summary:
        Remove authentication and exit the application
      tags:
        - Authentication
      description: |
        Ending authentication for a user requires removing a non-expiring token.
        This method will clear the JWT tokens for the application
      responses:
        200:
          description: Successful response
        400:
          description: User not logged in
          schema:
            $ref: '#/definitions/Error'
      security:
        - main: []
  /pw_reset:
    post:
      summary:
        Requests that a password reset token be sent to the given email address
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/reset_start'
      description: |
        Will request a password reset code be sent to the e-mail address provided in the form body.
        Will result in an e-mail being sent with an access code. The access code will have a 15 minute timeout.
        No new reset codes will be able to be generated for the same email address within the timeout window.
        Will generate a refresh token if the email address is valid, the PUT verb for this endpoint will require
        a valid refresh token.
      responses:
        200:
          description: Successful response
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Email address not found
    put:
      summary:
        Requests that the user's password be reset. Requires an e-mail address that matches the refresh token.
        Also requires a reset code that has not timed out
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/reset_finish'
      description: |
        Will reset the users password to the requested value if the refresh token is valid, matches the email address,
        and the reset code is valid and current.
      responses:
        200:
          description: Successful response
        400:
          description: Request error
          schema:
            $ref: '#/definitions/Error'
  # API to shut down the server
  /shutdown:
    post:
      description: |
        Allows for clean server shutdown.
      tags:
        - Test Utilities
      parameters:
        - name: key
          description: Unique application key to allow shutdown
          in: body
          schema:
            type: object
            title: ShutdownKey
            properties:
              key:
                type: string
      responses:
        200:
          description: Server successfully shut down
        404:
          description: User not authorized to shut down server

securityDefinitions:
  main:
    type: apiKey
    description: User access key in cookie and CSRF key in header
    name: X-CSRF-TOKEN
    in: header

parameters:
  search_text:
    in: query
    name: search_text
    required: false
    type: string
    description: String to filter search with
  reset_finish:
    in: body
    name: reset_finish
    description: Fields required to complete password reset
    schema:
      type: object
      required:
        - email
        - password
        - reset_code
      properties:
        email:
          type: string
          description: User email address for password reset
          minLength: 4
          maxLength: 80
        password:
          type: string
          description: New Password
          minLength: 8
          maxLength: 32
        reset_code:
          type: string
          description: Reset code
          minLength: 6
          maxLength: 6
  reset_start:
    name: reset_start
    in: body
    description: Fields required to start password reset
    schema:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: User email address for password reset
          minLength: 4
          maxLength: 80

definitions:
  Error:
    type: object
    properties:
      key:
        type: string
        description: Unique identifier for error message
      text:
        type: string
        description: Default english error message
      error_code:
        type: integer
        description: Error code (equivalent to HTTP status code)
  Login:
    type: object
    properties:
      username:
        type: string
        description: Login user name
        minLength: 4
        maxLength: 32
      password:
        type: string
        description: Password
        minLength: 4
        maxLength: 32
      access_token:
        type: string
        description: Access Token generated by Facebook authentication APIs
  User:
    type: object
    required:
      - username
      - email
      - phone
    properties:
      user_id:
        type: string
        description: Unique Identifier
        readOnly: true
      username:
        type: string
        description: Login user name
        minLength: 4
        maxLength: 32
      email:
        type: string
        description: Email address
        minLength: 4
        maxLength: 80
      first_name:
        type: string
        description: First Name
        minLength: 2
        maxLength: 80
      last_name:
        type: string
        description: Last Name
        minLength: 2
        maxLength: 80
      phone:
        type: string
        description: Phone number
        minLength: 10
        maxLength: 20
      preferences:
        description: User Preferences
        type: object
      roles:
        description: User Roles
        type: string
  createUser:
    allOf:
      - $ref: '#/definitions/User'
      - type: object
        required:
          - password
          - reCaptchaResponse
        properties:
          password:
            type: string
            description: User password
            minLength: 8
            maxLength: 32
          reCaptchaResponse:
            type: string
            description: ReCaptcha Token for validation
            minLength: 4
            maxLength: 800
  loginUser:
    allOf:
      - $ref: '#/definitions/User'
      - type: object
        properties:
          token:
            type: string
            description: Access token with expiration date
          source:
            type: string
            description: Authentication source for this user (Facebook or Local)
  updateUser:
    allOf:
      - $ref: '#/definitions/User'
      - type: object
        properties:
          password:
            type: string
            description: User password (changing user data requires re-entry of password)
            minLength: 8
            maxLength: 32
          newPassword:
            type: string
            description: New password

tags:
  - name: Authentication
    description: APIs associated with application authentication
  - name: Users
    description: APIs associated with CRUD for users
  - name: Test Utilities
    description: APIs that should only be used by test utilities
