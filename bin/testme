#!/bin/bash

# Initialize variables that could be set by command line
nose_verbosity=2                  # -v: Default nose verbosity to one line per test (like mocha)
run_coverage=0                    # -c Default to not run code coverage, -c will turn on
run_nose=1                        # -n Default to running nose tests, -n will turn off
run_mocha=1                       # -m Default to running mocha tests, -m will turn off
nose_args='test/server'           # -a: Optional additional argments to nosetests command
mocha_args='-- --recursive tests' # -b: Optional additional arguments to mocha command
cover_args=''                     # -d: Optional additional arguments to cover command

# Use getopts to parse arguments

while getopts "a:b:cd:mnv:" opt; do
    case "$opt" in
    a)  nose_args=$OPTARG
    ;;
    b)  mocha_args=$OPTARG
    ;;
    c)  run_coverage=1
    ;;
    d)  cover_args=$OPTARG
    ;;
    m)  run_mocha=0
    ;;
    n)  run_nose=0
    ;;
    v)  nose_verbosity=$OPTARG
    esac
done

# Drop all processed args so $@ has leftovers
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Uncomment these to debug command line argument processing
#echo "run_coverage=$run_coverage, run_mocha=$run_mocha, run_nose=$run_nose, nose_verbosity=$nose_verbosity"
#echo "nose_args=$nose_args"
#echo "2: mocha_args=$mocha_args"
#echo "cover_args=$cover_args"
#echo "leftovers: $@"


# Ensure that we have a clean database for the test run
rm -R test/mysql-data

# Ensure that we have the basic environment defined
source bin/olsnet-test

# Set variables we'll use to assess what is happening
server_running=0
nose_result=0
mocha_result=0

# If we're running any tests, start the API server
if [ "$run_nose" -gt "0" ] || [ "$run_mocha" -gt "0" ] || [ "$run_coverage" -gt "0" ]; then
  echo "Starting api server on localhost at port $APPSERVER_HOST_PORT"
  if [ "$run_coverage" -eq "0" ]; then
#    eval "server/bin/python -m flask run --port=$PORT --host=$HOST > logs/testme.log 2>&1" &
    # Start the docker image for testing
    # Sleep for 5 seconds to ensure that all of the containers are up
    # TODO: more elegant approach to ensure that all servers are up
    SERVER_COMMAND="python3 /app/server.py"
  else
#    SERVER_COMMAND="coverage run --source /app,/app/dm,/app/api /app/server.py"
    SERVER_COMMAND="/app/test_script"
  fi
  echo "About to execute compose with $SERVER_COMMAND with coverage in $COVERAGE_FILE"
  docker-compose -p testing up -d --build
  sleep 5
  server_running=1
fi

# If we're running the server, then add the testing user
if [ "$server_running" -gt "0" ]; then
  curl -H "Content-Type: application/json" -X POST -d '{"username": "testing", "password":"testing0", "email": "test@wittle.net", "phone": "9199999999"}' http://localhost:8081/api/v1/users
fi

# If we are running nose tests, then do it
if [ "$run_nose" -gt "0" ] && [ "$server_running" -gt "0" ]; then
#  if [ "$run_coverage" -eq "0" ]; then
  eval "server/bin/nosetests --verbosity=$nose_verbosity $nose_args"
#  else
#    eval "COVERAGE_FILE=./coverage/.coverage.client coverage run --source server/src,server/src/dm,server/src/api server/bin/nosetests --verbosity=$nose_verbosity $nose_args"
#  fi
  nose_result=$?
fi

# If we are running mocha tests, then do it
if [ "$run_mocha" -gt "0" ] && [ "$server_running" -gt "0" ]; then
  if [ "$run_coverage" -eq "1" ]; then
    eval "cd client; npm run-script cover $mocha_args"
  else
    eval "cd client; npm test $mocha_args"
  fi
  mocha_result=$?
fi

# If we started the server, send the command to shut down the api server
if [ "$server_running" -gt "0" ]; then
  # Test is complete, so stop the test docker image
  echo "about to post shutdown to ${WEBSERVER_HOST_PORT}"
  curl -H "Content-type: application/json" -X POST -d '{"key":"Eric"}' http://localhost:${WEBSERVER_HOST_PORT}/api/v1/shutdown
  sleep 3
  docker-compose -p testing stop
fi

my_exit=0
if [ "$nose_result" -eq "0" ] && [ "$mocha_result" -eq "0" ]; then
  if [ "$run_coverage" -gt "0" ]; then
    if [ "$run_mocha" -gt "0" ]; then
      eval "cd .."
    fi
    cd coverage
#    coverage combine
#    coverage report -m --skip-covered
    cat coverage.report
    cd ..
  fi
  echo "All tests successful!"
else
  my_exit=1
  echo "We have a problem: "
  if [ "$nose_result" -gt "0" ]; then
    echo "--> Failures in nose tests"
  fi
  if [ "$mocha_result" -gt "0" ]; then
    echo "--> Failures in mocha tests"
  fi
fi
exit $my_exit

